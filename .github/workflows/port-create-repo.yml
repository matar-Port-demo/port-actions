name: Scaffold a new service

on:
  workflow_dispatch:
    inputs:
      service_name:
        required: true
        description: The name of the new service
        type: string
      description:
        required: false
        description: Description of the service
        type: string
      port_context:
        required: true
        description: Includes the action's run id
        type: string
    secrets:
      PORT_CLIENT_ID:
        required: true
      PORT_CLIENT_SECRET:
        required: true
      ORG_ADMIN_TOKEN:
        required: true
      OPENAI_API_KEY:
        required: true

jobs:
  scaffold-service:
    runs-on: ubuntu-latest
    env:
      ORG_NAME: <Your ORG name>
      PORT_RUN_ID: ${{ fromJson(inputs.port_context).runId }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Log start of scaffolding
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          logMessage: "🚀 Starting scaffolding of service and repository: `${{ inputs.service_name }}`"

      - name: Create GitHub Repository
        id: scaffold
        uses: port-labs/cookiecutter-gha@v1.1.1
        with:
          portClientId: ${{ secrets.PORT_CLIENT_ID }}
          portClientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          token: ${{ secrets.ORG_ADMIN_TOKEN }}
          portRunId: ${{ env.PORT_RUN_ID }}
          repositoryName: ${{ inputs.service_name }}
          portUserInputs: '{"cookiecutter_app_name": "${{ inputs.service_name }}" }'
          cookiecutterTemplate: https://github.com/lacion/cookiecutter-golang
          blueprintIdentifier: "githubRepository"
          organizationName: ${{ env.ORG_NAME }}
        continue-on-error: true

      - name: Summarize GitHub logs using OpenAI
        id: summarize
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO_NAME: ${{ github.event.repository.name }}
          OWNER: ${{ github.repository_owner }}
          RUN_ID: ${{ github.run_id }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          echo "📦 Downloading logs for this run..."
          curl -sSL \
          -H "Authorization: Bearer $GH_TOKEN" \
          -H "Accept: application/vnd.github+json" \
          "https://api.github.com/repos/$OWNER/$REPO_NAME/actions/runs/$RUN_ID/logs" \
          -o logs.zip

          echo "🧪 Checking if logs.zip is a valid zip file..."
          if ! file logs.zip | grep -q "Zip archive data"; then
            echo "❌ logs.zip is not a valid ZIP archive. Skipping summarization."
            echo "summary=❌ Could not download or unzip GitHub logs. No AI summary generated." >> $GITHUB_OUTPUT
            exit 0
          fi

          unzip logs.zip -d logs
          cat logs/* > full_log.txt

          echo "💡 Sending logs to OpenAI for summarization..."
          LOG=$(jq -Rs . < full_log.txt)
          SUMMARY=$(curl -s https://api.openai.com/v1/chat/completions \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -H "Content-Type: application/json" \
            -d "{
              \"model\": \"gpt-4\",
              \"messages\": [
                {\"role\": \"system\", \"content\": \"You're summarizing GitHub Action logs for developers using an internal developer portal. Focus on what happened, call out issues clearly if any, and keep the tone positive and clear.\"},
                {\"role\": \"user\", \"content\": $LOG}
              ],
              \"temperature\": 0.4
            }" | jq -r '.choices[0].message.content')

          echo "$SUMMARY" > summary.txt
          echo "summary=$SUMMARY" >> $GITHUB_OUTPUT

      - name: Patch AI summary to Port
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          logMessage: |
            🤖 **AI-generated summary of scaffolding run**:
            ${{ steps.summarize.outputs.summary }}

      - name: Create service entity in Port
        if: steps.scaffold.outcome == 'success'
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: UPSERT
          identifier: "${{ inputs.service_name }}_service"
          title: "${{ inputs.service_name }} Service"
          blueprint: "service"
          relations: |
            {
              "repository": "${{ inputs.service_name }}"
            }

      - name: Log finish
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{ env.PORT_RUN_ID }}
          logMessage: "✅ Scaffolding complete for `${{ inputs.service_name }}`"
